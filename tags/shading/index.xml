<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shading on 玄冬Wong</title>
    <link>http://www.dawnarc.com/tags/shading/</link>
    <description>Recent content in Shading on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Sep 2017 18:04:28 +0800</lastBuildDate>
    
	<atom:link href="http://www.dawnarc.com/tags/shading/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[OpenGL]Shader编译流程示例</title>
      <link>http://www.dawnarc.com/2017/09/openglshader%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Fri, 29 Sep 2017 18:04:28 +0800</pubDate>
      
      <guid>http://www.dawnarc.com/2017/09/openglshader%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B/</guid>
      <description>这里以演示如何编译Vertex Shader为例，其他类型的Shader类似。
1，先用io流读取shader文件
std::stringstream code; code &amp;lt;&amp;lt; inFile.rdbuf(); inFile.close(); string codeStr(code.str());  2，创建空白Shader对象
GLuint vertShader = glCreateShader( GL_VERTEX_SHADER );  3，编译Shader代码到Shader对象中
// Load the source code into the shader object const GLchar* codeArray[] = {codeStr.c_str()}; glShaderSource(vertShader, 1, codeArray, NULL); // Compile the shader glCompileShader( fragShader );  4，Shader链接
4.1 创建program对象
// Create the program object GLuint programHandle = glCreateProgram();  4.2 附加Shader对象到program对象中
// Attach the shaders to the program object glAttachShader( programHandle, vertShader ); glAttachShader( programHandle, fragShader );  4.</description>
    </item>
    
    <item>
      <title>[OpenGL]GLSHCookbook源码编译步骤流程</title>
      <link>http://www.dawnarc.com/2017/09/openglglshcookbook%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 06 Sep 2017 22:38:28 +0800</pubDate>
      
      <guid>http://www.dawnarc.com/2017/09/openglglshcookbook%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4%E6%B5%81%E7%A8%8B/</guid>
      <description>这里讲解《OpenGL 4 Shading Language Cookbook, Second Edition》 这本书的示例代码如何编译。
编译步骤 1，下载glm的源码，并用cmake-gui生成出VisualStudio的工程文件。
https://github.com/g-truc/glm/releases
2，下载glfw。
https://github.com/glfw/glfw/releases
注意是下载bin文件不是src源码。（如果你想用src编译lib，则无视）
3，下载glslcookbook源码，这是《OpenGL 4 Shading Language Cookbook, Second Edition》的书籍源码，下载后同样用cmake-gui生成vs工程文件： https://github.com/daw42/glslcookbook
4，cmake-gui首次生成glshcookbook源码时会报错   这时需要指定GLM的依赖库位置，这个位置就是步骤1中的生成的GLM库的bin目录。注意这个bin目录不是GLM自带的，是通过cmake-gui指定生成的。
在指定GLM_INCLUDE_DIR之后，再点击Generate，又会出现新的错误，提示GLFW找不到，这时需要再指定GLFW的相关目录，即步骤2中下载的GLFW lib和头文件。   参数解释：
 CMAKE_BUILD_TYPE ：默认，不做修改 CMAKE_CONFIGURATION_TYPES ：默认，不做修改 CMAKE_INSTALL_PREFIX ：不清楚，删掉也不影响 GLFW3_INCLUDE_DIR ：GLFW的头文件目录 GLFW3_LIBRARY ：GLFW的静态库目录 GLM_INCLUDE_DIR ：GLM的头文件目录  最后生成成功的提示为：   打开VS工程，可以看到每一章的示例代码并可编译。（这里看不到.sln的图标是因为我电脑之前卸载了旧版本的vs，导致新版本vs的图标显示不正常，可以无视）     运行程序 每个章节的exe无法双击运行，需要命令输入相关参数。 以章节5为例，先CD到exe所在目录：
cd /d D:\glslcookbook\bin\chapter05\Debug&amp;gt;  然后输入：
chapter05.exe  则会提示：
Recipe names: blur : Gaussian blur deferred : deferred rendering edge : edge detection filter gamma : gamma correction msaa : multisample anti-aliasing tone-map : tone mapping example.</description>
    </item>
    
  </channel>
</rss>