<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shading on 玄冬Wong</title>
    <link>https://dawnarc.com/tags/shading/</link>
    <description>Recent content in Shading on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Feb 2022 00:18:28 +0800</lastBuildDate><atom:link href="https://dawnarc.com/tags/shading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Shading]Theory Notes</title>
      <link>https://dawnarc.com/2022/02/shadingtheory-notes/</link>
      <pubDate>Sun, 13 Feb 2022 00:18:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2022/02/shadingtheory-notes/</guid>
      <description>&lt;p&gt;keywords：Shading Theory Notes&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Shading]Notes on Using Textures</title>
      <link>https://dawnarc.com/2020/07/shadingnotes-on-using-textures/</link>
      <pubDate>Sun, 12 Jul 2020 14:18:00 +0800</pubDate>
      
      <guid>https://dawnarc.com/2020/07/shadingnotes-on-using-textures/</guid>
      <description>&lt;p&gt;keywords: Graphics, Shading, Texture Downsampling (Downscaling) Notes&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Shading]Shaderc(glslc) Building on Windows</title>
      <link>https://dawnarc.com/2019/09/shadingshadercglslc-building-on-windows/</link>
      <pubDate>Mon, 23 Sep 2019 20:01:00 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/09/shadingshadercglslc-building-on-windows/</guid>
      <description>&lt;p&gt;keywords：Shaderc, glslc.exe, installation, building&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Shading]Advanced Toon Shading Notes</title>
      <link>https://dawnarc.com/2019/08/shadingadvanced-toon-shading-notes/</link>
      <pubDate>Fri, 23 Aug 2019 22:42:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/08/shadingadvanced-toon-shading-notes/</guid>
      <description>&lt;p&gt;Keywords: Graphics, Shading, Toon, Cartoon, Cel, 3D to 2D&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Shading]Shader Sources Collections</title>
      <link>https://dawnarc.com/2019/07/shadingshader-sources-collections/</link>
      <pubDate>Sat, 20 Jul 2019 15:45:00 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/07/shadingshader-sources-collections/</guid>
      <description>&lt;p&gt;keywords：Shader, HLSL, GLSL, Effect, Example&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Shading]Flat、Gouraud、Phong Shading的差別</title>
      <link>https://dawnarc.com/2018/06/shadingflatgouraudphong-shading%E7%9A%84%E5%B7%AE%E5%88%A5/</link>
      <pubDate>Tue, 26 Jun 2018 15:54:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/06/shadingflatgouraudphong-shading%E7%9A%84%E5%B7%AE%E5%88%A5/</guid>
      <description>keywords：Comparison flat, Gouraud, Phong shading
原文：
https://cg2010studio.com/2011/11/01/flat%E3%80%81gouraud%E3%80%81phong-shading%E7%9A%84%E5%B7%AE%E5%88%A5-comparison-flat-gouraud-phong-shading/
现今多边形的著色方法基本的有这三种：flat、Gouraud、Phong Shading，它们之间有何差别呢？喜欢玩游戏的人一定要知道Gouraud Shading，这是PC最常使用的著色法，因为效能好、效果还不错。而近年来，随着GPU快速的发展，Phong Shading逐渐应用在更真实的著色上。
从一张图可以看出他们的各自的特色：（a: Flat→b: Gouraud→c: Phong）
从古早到现代：Flat→Gouraud→Phong Shading。
从简单到复杂：Flat→Gouraud→Phong Shading。
观察三者所呈现的效果，可以归纳出下列结论：
平面着色：恒定的表面着色 Gouraud着色：颜色插值着色 Phong着色：顶点法线插值着色 用简单的中文来解释原理：
flat shading：三角形的顶点没有法向量，三角形整个面才有法向量，打光时整个三角形只呈现一种颜色。 Gouraud shading：三角形的顶点都有各自的法向量，打光时三个顶点有各自的颜色，接着做双线性内插（bilinear interpolation）来求得颜色，使整个三角形有渐层的颜色变化。 Phong shading：三角形的顶点都有各自的法向量，先对三角形整个面作法向量的双线性内插，接着打光来求整个三角形的颜色。 然后我们来分析各自的复杂度：
假设三角形面积为 A 。三角形个数为 N 。而且我们知道打一次光需要6次乘法和2次加法和1次查表的运算，此设定为 L 。双线性内插设定为 B 。
flat shading的复杂度：N * L Gouraud shading 的复杂度：N * (3 * L + b * A) Phong shading的复杂度：(B + L) * N * A 数学好的人很容易计算出复杂度：Flat &amp;lt; Gouraud &amp;lt; Phong Shading。这里也因此说明了为何早期电脑都只支援Gouraud shading，就算已经知道Phong shading的效果比Gouraud shading好，但还是选择效能好而效果不错的Gouraud shading！如今GPU发展迅速，Phong Shading的效能已得到提升。 stack overflow答案 https://computergraphics.</description>
    </item>
    
    <item>
      <title>[OpenGL]GLSL Cookbook源码编译步骤流程(2018.06新版)</title>
      <link>https://dawnarc.com/2018/06/openglglsl-cookbook%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4%E6%B5%81%E7%A8%8B2018.06%E6%96%B0%E7%89%88/</link>
      <pubDate>Mon, 18 Jun 2018 23:47:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/06/openglglsl-cookbook%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4%E6%B5%81%E7%A8%8B2018.06%E6%96%B0%E7%89%88/</guid>
      <description>去年写过一篇文章，该文章与github上的最新代码已不再有效（主要是glm和glfw相关的CMake配置发生变动）：
https://dawnarc.com/2017/09/openglglsl-cookbook%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4%E6%B5%81%E7%A8%8B/
当前这篇文章针对github的glslcookbook最新代码，重新梳理一次配置流程，保证最新代码能编译工程并跑起来。步骤如下：
1，下载glm源码，并用cmake-gui生成VS工程文件：
https://github.com/g-truc/glm/releases/download/0.9.9.0/glm-0.9.9.0.zip
假设
cmake-gui的source code设置为：
D:/sdk/glm-0.9.9.0
cmake-gui的build binaries设置为：
D:/sdk/glm-0.9.9.0/bin
Configure过程中，会有警告，可以无视，直接Generate：
GLM is a header only library, no need to build it. Set the option GLM_TEST_ENABLE with ON to build and run the test bench生成完以后，不需要打开VS编译，后面直接使用相关文件即可。
2，下载glfw源码，并用cmake-gui生成VS工程文件。 https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip
假设
cmake-gui的source code设置为：
D:/sdk/glfw-3.2.1
cmake-gui的build binaries设置为：
D:/sdk/glfw-3.2.1/bin
Configure过程中，会有红色警告，可以无视，直接Generate：
CMake Deprecation Warning at CMakeLists.txt:10 (cmake_policy): The OLD behavior for policy CMP0042 will be removed from a future version of CMake. The cmake-policies(7) manual explains that the OLD behaviors of all policies are deprecated and that a policy should be set to OLD only under specific short-term circumstances.</description>
    </item>
    
    <item>
      <title>[Shading]ADS光照模型实例(OpenGL实现)</title>
      <link>https://dawnarc.com/2018/06/shadingads%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E4%BE%8Bopengl%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 03 Jun 2018 22:30:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/06/shadingads%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E4%BE%8Bopengl%E5%AE%9E%E7%8E%B0/</guid>
      <description>keywords：ambient diffuse specular、Phong Shading、Phong reflection model
公式概述 ADS光照模型又称为“冯氏反射模型”(Phong reflection model)，为什么叫冯氏：
裴祥风（Bùi Tường Phong音译, 1942年—1975年），美国电脑CG研究学者，于越南出生。他于1973年在尤他大学取得哲学博士学位，并发明了Phong反射模型及Phong著色法，并广为CG界采用。1975死于白血病。
ADS光照模型公式缩写：
LightIntensity = Ambient + Diffuse + Specular;参数说明：
Ambient 环境光 Diffuse 漫反射 Specular 全反射光 / 镜面光 三个参数渲染效果示例： 三个参数拆解如下：
Ambient = La * Ka;Diffuse = Ld * Kd * max( dot(s, n), 0.0 );Specular = Ls * Ks * pow( max( dot(r, v), 0.0 ), f );参数说明：
La 环境光强度(Ambient light intensity) Ka 材质环境光反射率 / 材质环境光反射系数(Ambient reflectivity) Ld 漫射光强度 / 散射光强度(Diffuse light intensity) Kd 材质漫反射率 / 材质漫反射系数(Diffuse reflectivity) s 顶点 / 曲面点 到光源方向的单位向量(Direction from the surface point to the light source) n 顶点 / 曲面点 的法线单位向量(Normal vector at the surface point) Ls 镜面光强度 / 全反射光强度(Specular light intensity) Ks 材质镜面反射率 / 材质镜面反射系数(Specular reflectivity) r 完全反射向量( the vector of perfect reflection) v 顶点 / 曲面点 到摄像机方向的向量( the vector towards the viewer) f 镜面高光(specular highlights)，值范围在1到200之间，值越小，镜面亮点越大 光源出射强度 / 出射光强度(Intensity of the outgoing light ) I 的完整计算公式如下：</description>
    </item>
    
    <item>
      <title>[OpenGL]Shader编译流程示例</title>
      <link>https://dawnarc.com/2017/09/openglshader%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Fri, 29 Sep 2017 18:04:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2017/09/openglshader%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B/</guid>
      <description>这里以演示如何编译Vertex Shader为例，其他类型的Shader类似。
1，先用io流读取shader文件
std::stringstream code;code &amp;lt;&amp;lt; inFile.rdbuf();inFile.close();string codeStr(code.str());2，创建空白Shader对象
GLuint vertShader = glCreateShader( GL_VERTEX_SHADER );3，编译Shader代码到Shader对象中
// Load the source code into the shader objectconst GLchar* codeArray[] = {codeStr.c_str()};glShaderSource(vertShader, 1, codeArray, NULL);// Compile the shaderglCompileShader( fragShader );4，Shader链接
4.1 创建program对象
// Create the program objectGLuint programHandle = glCreateProgram();4.2 附加Shader对象到program对象中
// Attach the shaders to the program objectglAttachShader( programHandle, vertShader );glAttachShader( programHandle, fragShader );4.</description>
    </item>
    
    <item>
      <title>[OpenGL]GLSL Cookbook源码编译步骤流程</title>
      <link>https://dawnarc.com/2017/09/openglglsl-cookbook%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 06 Sep 2017 22:38:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2017/09/openglglsl-cookbook%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4%E6%B5%81%E7%A8%8B/</guid>
      <description>以下文章内容是基于glslcookbook所在github上2017年8月份的提交版本，当前文章所述的配置glm和glfw的步骤与github上最新CMakeList.txt已不再适用！针对2018.06的github代码，我新增了文章《[OpenGL]GLSL Cookbook源码编译步骤流程(2018.06新版)》。如果是萌新，建议先把当前旧文章看完再看新文章。
这里讲解《OpenGL 4 Shading Language Cookbook, Second Edition》 这本书的示例代码如何编译。
编译步骤 1，下载glm的源码，并用cmake-gui生成出VisualStudio的工程文件。
https://github.com/g-truc/glm/releases
2，下载glfw。
https://github.com/glfw/glfw/releases
注意是下载bin文件不是src源码。（如果你想用src编译lib，则无视）
3，下载glslcookbook源码，这是《OpenGL 4 Shading Language Cookbook, Second Edition》的书籍源码，下载后同样用cmake-gui生成vs工程文件： https://github.com/daw42/glslcookbook
4，cmake-gui首次生成glshcookbook源码时会报错 这时需要指定GLM的依赖库位置，这个位置就是步骤1中的生成的GLM库的bin目录。注意这个bin目录不是GLM自带的，是通过cmake-gui指定生成的。
在指定GLM_INCLUDE_DIR之后，再点击Generate，又会出现新的错误，提示GLFW找不到，这时需要再指定GLFW的相关目录，即步骤2中下载的GLFW lib和头文件。 参数解释：
CMAKE_BUILD_TYPE ：默认，不做修改 CMAKE_CONFIGURATION_TYPES ：默认，不做修改 CMAKE_INSTALL_PREFIX ：不清楚，删掉也不影响 GLFW3_INCLUDE_DIR ：GLFW的头文件目录 GLFW3_LIBRARY ：GLFW的静态库目录 GLM_INCLUDE_DIR ：GLM的头文件目录 最后生成成功的提示为： 打开VS工程，可以看到每一章的示例代码并可编译。（这里看不到.sln的图标是因为我电脑之前卸载了旧版本的vs，导致新版本vs的图标显示不正常，可以无视） 运行程序 每个章节的exe无法双击运行，需要命令输入相关参数。 以章节5为例，先CD到exe所在目录：
cd /d D:\glslcookbook\bin\chapter05\Debug&amp;gt;然后输入：
chapter05.exe则会提示：
Recipe names:blur : Gaussian blurdeferred : deferred renderingedge : edge detection filtergamma : gamma correctionmsaa : multisample anti-aliasingtone-map : tone mapping example.</description>
    </item>
    
  </channel>
</rss>
