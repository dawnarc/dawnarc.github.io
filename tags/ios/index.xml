<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on 玄冬Wong</title>
    <link>https://dawnarc.com/tags/ios/</link>
    <description>Recent content in iOS on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Mar 2018 19:00:02 +0800</lastBuildDate><atom:link href="https://dawnarc.com/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Xcode]常用设置与问题</title>
      <link>https://dawnarc.com/2018/03/xcode%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E4%B8%8E%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 15 Mar 2018 19:00:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/03/xcode%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E4%B8%8E%E9%97%AE%E9%A2%98/</guid>
      <description>添加头文件目录 Header Search Paths对应系统或者第三方库的头文件；#include &amp;lt;&amp;gt;
User Header Search Paths 对应用户自己代码的头文件；#include “”
添加静态库依赖 设置证书签名 https://stackoverflow.com/questions/34346436/xcode-7-2-no-matching-provisioning-profiles-found 清除缓存 点击xcode偏好设置-&amp;gt;Locations-&amp;gt;Derived Data，点击箭头定位到目标文件夹，将此文件夹清空并清空回收站，再重新编译即可。 有时候这个错误可以通过清理缓存解决：
Command /usr/bin/codesign failed with exit code 1编译静态库 http://blog.csdn.net/weidfyr/article/details/50590693
如果用模拟器版本静态库去链接真机版本，可能会出现的错误：
file was built for archive which is not the architecture being linked (arm64)解决办法：静态库编译成真机版本
Add preprocessor macro to a target in xcode（添加预处理宏） Select project file Select the target you want Go to Build Settings Search for &amp;lsquo;preprocessor&amp;rsquo; Add your preprocessor macro either for Debug, Release, or both.</description>
    </item>
    
    <item>
      <title>[Xcode]常用操作</title>
      <link>https://dawnarc.com/2018/03/xcode%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 07 Mar 2018 20:29:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/03/xcode%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>构建 command + R
清理工程 command + shift + K
当前工程根目录的环境变量（.xcworkspace文件所在目录） $(SRCROOT)头文件搜索路径 Always Search User Paths 是否优先使用User Header Search Paths
Header Search Paths 编译器的头文件目录
User Header Search Paths 自己工程的头文件目录
修改编译输出目录 Build Settings -&amp;gt; Build Locations -&amp;gt; Build Products Path
修改后需要重启xcode才会生效。
参考：http://blog.csdn.net/tintinr/article/details/50936313
iOS 静态库制作（Xcode9.0）
http://blog.csdn.net/wanna_dance/article/details/78687676
查看SDK版本号 命令：
$&amp;gt; xcodebuild -showsdks输出结果：
$&amp;gt; OS X SDKs:OS X 10.8 -sdk macosx10.8OS X 10.9 -sdk macosx10.9iOS SDKs:iOS 6.1 -sdk iphoneos6.</description>
    </item>
    
    <item>
      <title>[iOS]protobuf2.6编译iOS版本静态库</title>
      <link>https://dawnarc.com/2018/03/iosprotobuf2.6%E7%BC%96%E8%AF%91ios%E7%89%88%E6%9C%AC%E9%9D%99%E6%80%81%E5%BA%93/</link>
      <pubDate>Wed, 07 Mar 2018 19:20:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/03/iosprotobuf2.6%E7%BC%96%E8%AF%91ios%E7%89%88%E6%9C%AC%E9%9D%99%E6%80%81%E5%BA%93/</guid>
      <description>将以下脚本保存为shell脚本并运行：
sh build-protobuf-2.6.1.shbuild-protobuf-2.6.1.sh
#!/bin/bash -xecho &amp;quot;$(tput setaf 2)&amp;quot;echo Building Google Protobuf for Mac OS X / iOS.echo Use &#39;tail -f build.log&#39; to monitor progress.echo &amp;quot;$(tput sgr0)&amp;quot;# Controls which architectures are build/included in the# universal binaries and libraries this script produces.# Set each to &#39;1&#39; to include, &#39;0&#39; to exclude.BUILD_X86_64_MAC=1BUILD_X86_64_IOS_SIM=1BUILD_I386_IOS_SIM=1BUILD_ARMV7_IPHONE=1BUILD_ARMV7S_IPHONE=1BUILD_ARM64_IPHONE=1PB_VERSION=2.6.1# Set this to the replacement name for the &#39;google&#39; namespace.</description>
    </item>
    
    <item>
      <title>[iOS]mac平台用cmake编译ios lib</title>
      <link>https://dawnarc.com/2018/03/iosmac%E5%B9%B3%E5%8F%B0%E7%94%A8cmake%E7%BC%96%E8%AF%91ios-lib/</link>
      <pubDate>Tue, 06 Mar 2018 17:56:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/03/iosmac%E5%B9%B3%E5%8F%B0%E7%94%A8cmake%E7%BC%96%E8%AF%91ios-lib/</guid>
      <description>转载自：https://github.com/Tencent/ncnn/wiki/cmake-%E6%89%93%E5%8C%85-ios-sdk
安装 xcode 和 cmake xcode https://developer.apple.com/xcode/download
cmake OS X版本 https://cmake.org/download
默认情况 cmake 命令行可能用不了，需要手工加在 PATH 里面
export PATH=/Applications/CMake.app/Contents/bin/:$PATH准备 ios toolchain 文件 把 ios.toolchain.cmake 放到和 CMakeLists.txt 同一级的项目目录里 可以去 opencv 的 github 上弄来，自己稍微调整下。
传送门 https://github.com/Itseez/opencv/tree/master/platforms/ios/cmake
编译方法 mkdir build-ioscd build-ioscmake -DCMAKE_BUILD_TYPE=Release \-DCMAKE_TOOLCHAIN_FILE=../ios.toolchain.cmake \-DIOS_PLATFORM=iPhoneOS \-DCMAKE_OSX_ARCHITECTURES=armv7 ..makemake installmake package没有遇到错误的话，手机平台 armv7 库已经编好了
这里简要介绍几个参数
IOS_PLATFORM 是平台名字，iPhoneOS 是真实机器的 ios，iPhoneSimulator 是模拟器平台 CMAKE_OSX_ARCHITECTURES 指定架构，iPhoneOS 配套 armv7 armv7s arm64，iPhoneSimulator 配套 i386 x86_64 CMakeLists.</description>
    </item>
    
  </channel>
</rss>
