<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on 玄冬Wong</title>
    <link>https://dawnarc.com/tags/algorithms/</link>
    <description>Recent content in Algorithms on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Sep 2019 01:57:28 +0800</lastBuildDate>
    
	<atom:link href="https://dawnarc.com/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Math]Determine whether two balls moving at a constant velocity collide with each other</title>
      <link>https://dawnarc.com/2019/09/mathdetermine-whether-two-balls-moving-at-a-constant-velocity-collide-with-each-other/</link>
      <pubDate>Thu, 12 Sep 2019 01:57:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/09/mathdetermine-whether-two-balls-moving-at-a-constant-velocity-collide-with-each-other/</guid>
      <description>&lt;p&gt;keywords: Algorithms, Ball, Move, Collision, Velocity&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Algorithms]Time Complexity of Vector, Set and Map</title>
      <link>https://dawnarc.com/2019/09/algorithmstime-complexity-of-vector-set-and-map/</link>
      <pubDate>Mon, 09 Sep 2019 13:53:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/09/algorithmstime-complexity-of-vector-set-and-map/</guid>
      <description>&lt;p&gt;keywords: C++, Time Complexity, Vector, Set and Map&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Algorithms]Calculator Stack</title>
      <link>https://dawnarc.com/2018/10/algorithmscalculator-stack/</link>
      <pubDate>Fri, 12 Oct 2018 14:36:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/10/algorithmscalculator-stack/</guid>
      <description>keywords：计算器代码、Calculator
#include &amp;quot;stdio.h&amp;quot; #include &amp;quot;string.h&amp;quot; #define MAX 1001 double stack[MAX]; int tail; int main(){ int a; while(scanf(&amp;quot;%d &amp;quot;,&amp;amp;a)&amp;amp;&amp;amp;a!=0){ tail=0; stack[++tail]=1.0*a;//tail始终指向末尾数字位置 //1.入栈所有数据（如果遇到*/号，只更新栈尾） char ch1,ch2; while(scanf(&amp;quot;%c %d%c&amp;quot;,&amp;amp;ch1,&amp;amp;a,&amp;amp;ch2)!=EOF){ if(ch1==&#39;+&#39;){ stack[++tail]=1.0*a;//push }else if(ch1==&#39;-&#39;){ stack[++tail]=-1.0*a;//push neg }else if(ch1==&#39;*&#39;){ stack[tail]=stack[tail]*a;//update tail }else if(ch1==&#39;/&#39;){ stack[tail]=stack[tail]/(double)a;//updata tail } if(ch2!=&#39; &#39;) break; } //2.把栈里头的东西全部加起来，求和 double result=0; for(int i=1;i&amp;lt;=tail;i++) result+=stack[i]; printf(&amp;quot;%.2lf\n&amp;quot;,result); } return 1; }  原文：https://blog.csdn.net/JIEJINQUANIL/article/details/51405381</description>
    </item>
    
    <item>
      <title>[Algorithms]StarCraft 2&#39;s AI Algorithm</title>
      <link>https://dawnarc.com/2018/07/algorithmsstarcraft-2s-ai-algorithm/</link>
      <pubDate>Thu, 12 Jul 2018 13:28:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/07/algorithmsstarcraft-2s-ai-algorithm/</guid>
      <description>keywords：Pathfinding、Rush AI、Flocking AI、Swarm AI、Fish AI、
相关博客 The StarCraft BroodWar Resource for custom AIs
http://www.starcraftai.com/wiki/Main_Page
How does StarCraft II&amp;rsquo;s pathfinding algorithm work?
https://www.quora.com/How-does-StarCraft-IIs-pathfinding-algorithm-work
pathing 6 - flocking
http://satirist.org/ai/starcraft/blog/archives/68-pathing-6-flocking.html
STARCRAFT 1 PATHFINDING: A TECHNICAL ANALYSIS
http://striketactics.net/devblog/starcraft-1-pathfinding-technical-analysis
The StarCraft path-finding hack
https://www.codeofhonor.com/blog/the-starcraft-path-finding-hack
A* navigational mesh path finding
https://gamedev.stackexchange.com/questions/20392/a-navigational-mesh-path-finding
相关论文 A Q-Learning Algorithm for Adversarial Real-Time Strategy Games
https://www.aaai.org/ocs/index.php/AIIDE/AIIDE12/paper/download/5515/5734
StarCraft Unit Motion: Analysis and Search Enhancements
https://www.aaai.org/ocs/index.php/AIIDE/AIIDE15/paper/download/11573/11384
MCTS library for unit movement planning in real-time strategy game Starcraft</description>
    </item>
    
  </channel>
</rss>