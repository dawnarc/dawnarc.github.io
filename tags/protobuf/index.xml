<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Protobuf on 玄冬Wong</title>
    <link>https://dawnarc.com/tags/protobuf/</link>
    <description>Recent content in Protobuf on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Apr 2018 15:42:02 +0800</lastBuildDate>
    
	<atom:link href="https://dawnarc.com/tags/protobuf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Android NDK]protobuf-lite 3.5编译</title>
      <link>https://dawnarc.com/2018/04/android-ndkprotobuf-lite-3.5%E7%BC%96%E8%AF%91/</link>
      <pubDate>Thu, 19 Apr 2018 15:42:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/04/android-ndkprotobuf-lite-3.5%E7%BC%96%E8%AF%91/</guid>
      <description>protobuf源码NDK编译配置 假设工程结构如下：
protobuf-build |-jni |- Android.mk |- Application.mk |- google |-protobuf  Android.mk LOCAL_PATH := $(call my-dir) include $(CLEAR_VARS) CC_LITE_SRC_FILES := \ google/protobuf/arena.cc \ google/protobuf/arenastring.cc \ google/protobuf/extension_set.cc \ google/protobuf/generated_message_table_driven_lite.cc \ google/protobuf/generated_message_util.cc \ google/protobuf/io/coded_stream.cc \ google/protobuf/io/zero_copy_stream.cc \ google/protobuf/io/zero_copy_stream_impl_lite.cc \ google/protobuf/message_lite.cc \ google/protobuf/repeated_field.cc \ google/protobuf/stubs/atomicops_internals_x86_gcc.cc \ google/protobuf/stubs/atomicops_internals_x86_msvc.cc \ google/protobuf/stubs/bytestream.cc \ google/protobuf/stubs/common.cc \ google/protobuf/stubs/int128.cc \ google/protobuf/stubs/io_win32.cc \ google/protobuf/stubs/once.cc \ google/protobuf/stubs/status.cc \ google/protobuf/stubs/statusor.cc \ google/protobuf/stubs/stringpiece.cc \ google/protobuf/stubs/stringprintf.cc \ google/protobuf/stubs/structurally_valid.cc \ google/protobuf/stubs/strutil.cc \ google/protobuf/stubs/time.cc \ google/protobuf/wire_format_lite.</description>
    </item>
    
    <item>
      <title>[Batch]Protobuf 3 protoc generate multiple proto files</title>
      <link>https://dawnarc.com/2018/03/batchprotobuf-3-protoc-generate-multiple-proto-files/</link>
      <pubDate>Sat, 31 Mar 2018 19:03:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/03/batchprotobuf-3-protoc-generate-multiple-proto-files/</guid>
      <description>keywords：Protobuf 3、同时生成多个proto文件、通配符
假设目录结构如下：
root |-proto |-a.proto |-b.proto |-build |-protoc.exe  protobuf 2.x版本，可以通过通配符指定所有proto模板文件
protoc --proto_path=./proto/ --cpp_out=dllexport_decl=LIBPROTOC_EXPORT:./build ./proto/*.proto  但是protobuf 3.x版本不识别通配符，不过可以通过BAT或者shell提供的遍历语法，来同时生成多个proto文件。
windows bat：
set dir=%cd%/proto set out_cpp=./build for /R %%s in (*.proto) do ( if exist %%s protoc.exe -I=%dir% --cpp_out=%out_cpp% %%s )  欲无祸于昭昭，勿得罪于冥冥。----《菜根谭》</description>
    </item>
    
    <item>
      <title>[Android NDK]protobuf-lite 2.6编译与protoc生成代码编译</title>
      <link>https://dawnarc.com/2018/02/android-ndkprotobuf-lite-2.6%E7%BC%96%E8%AF%91%E4%B8%8Eprotoc%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sun, 11 Feb 2018 12:27:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/02/android-ndkprotobuf-lite-2.6%E7%BC%96%E8%AF%91%E4%B8%8Eprotoc%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/</guid>
      <description>Protobuf源码与protoc生成代码编译成一个静态库 工程结构：
MyProj |-jni |- Android.mk |- Application.mk |- google |- protobuf |- io |- stubs |- proto_gen_src  其中，google为protobuf的源码；proto_gen_src为protoc生成的代码，即：*.pb.cc。
Android.mk
LOCAL_PATH := $(call my-dir) include $(CLEAR_VARS) CC_LITE_SRC_FILES := \ google/protobuf/stubs/common.cc \ google/protobuf/stubs/once.cc \ google/protobuf/extension_set.cc \ google/protobuf/generated_message_util.cc \ google/protobuf/message_lite.cc \ google/protobuf/repeated_field.cc \ google/protobuf/wire_format_lite.cc \ google/protobuf/io/coded_stream.cc \ google/protobuf/io/zero_copy_stream.cc \ google/protobuf/io/zero_copy_stream_impl_lite.cc # C++ full library # ======================================================= #include $(CLEAR_VARS) LOCAL_MODULE := MyProj.ndk LOCAL_MODULE_TAGS := optional LOCAL_CPP_EXTENSION := .cc #protobuf源码目录 LOCAL_SRC_FILES += \ $(CC_LITE_SRC_FILES) #protoc生成代码的目录 MY_CPP_LIST := $(wildcard $(LOCAL_PATH)/proto_gen_src/*.</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;]protobuf中对中文编码与解析</title>
      <link>https://dawnarc.com/2016/09/c-protobuf%E4%B8%AD%E5%AF%B9%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 11 Sep 2016 02:43:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/09/c-protobuf%E4%B8%AD%E5%AF%B9%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E6%9E%90/</guid>
      <description>代码：
std::string str(&amp;quot;笑傲江湖DA&amp;quot;); int Len = str.size(); char* data = new char[Len](); strcpy(data, str.data()); HProtocol::test t1; t1.set_input_str(data); char* buff[1024]; t1.SerializeToArray(buff, 1024); HProtocol::test t2; t2.ParseFromArray(buff, t1.ByteSize()); //最终str3的值依然是str的值 const char* str3 = t2.input_str().data();  </description>
    </item>
    
  </channel>
</rss>