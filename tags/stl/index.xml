<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>STL on 玄冬Wong</title>
    <link>https://dawnarc.com/tags/stl/</link>
    <description>Recent content in STL on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Oct 2016 22:11:40 +0800</lastBuildDate><atom:link href="https://dawnarc.com/tags/stl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[C&#43;&#43;]for循环中的size参数优化问题</title>
      <link>https://dawnarc.com/2016/10/c-for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84size%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 11 Oct 2016 22:11:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/10/c-for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84size%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/</guid>
      <description>之前网上一直有这么一条for循环优化建议： 将size提到第一个分号前，这样可以提高循环的效率，例如：
std::vector&amp;lt;int&amp;gt; aaa;for (size_t i = 0, size = aaa.size(); i &amp;lt; size; i++){printf(&amp;quot;bbb&amp;quot;);} 这个如果是很多年前，应该是有道理的，但是现在的编译器足够聪明，很多看起不够优化的代码，编译器会帮你处理。 以下是在VS2015下的汇编代码，结果是：size不前提反而可以节省两次mov指令。
size放在第一个分号后：
 for (size_t i = 0; i &amp;lt; aaa.size(); i++)00007FF7629E3147 mov qword ptr [rbp+48h],0 00007FF7629E314F jmp _20161011+3Ch (07FF7629E315Ch) 00007FF7629E3151 mov rax,qword ptr [rbp+48h] 00007FF7629E3155 inc rax 00007FF7629E3158 mov qword ptr [rbp+48h],rax 00007FF7629E315C lea rcx,[aaa] 00007FF7629E3160 call std::vector&amp;lt;int,std::allocator&amp;lt;int&amp;gt; &amp;gt;::size (07FF7629E16BDh) 00007FF7629E3165 cmp qword ptr [rbp+48h],rax 00007FF7629E3169 jae _20161011+59h (07FF7629E3179h)  size提到第一个分号前：</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;]error C2034  type of bit field too small for number of bits</title>
      <link>https://dawnarc.com/2016/10/c-error-c2034-type-of-bit-field-too-small-for-number-of-bits/</link>
      <pubDate>Sun, 02 Oct 2016 13:40:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/10/c-error-c2034-type-of-bit-field-too-small-for-number-of-bits/</guid>
      <description>原文：http://ju.outofmemory.cn/entry/149128
struct A {int x:1;int y:2;int z:31;}; 此时是正确的
但是：
struct A {int x:1;int y:2;int z:33;}; 此时就会有编译错误：error C2034: &#39;z&#39; : type of bit field too small for number of bits
原文：http://zhidao.baidu.com/question/60696610.html
struct/class定义中在成员后面加冒号“：1”是什么意思？
这是位域操作的表示方法，也就是说后面加上“：1”的意思是这个成员的大小占所定义类型的1 bit，“：2”占2 bit，依次类推。当然大小不能超过所定义类型包含的总bit数。 一个bytes(字节)是8 bit(bit)。例如你的结构中定义的类型是u_char，一个字节，共8bit，最大就不能超过8。 32位机下， short是2字节，共16bit，最大就不能超过16. int是4字节，共32bit，最大就不能超过32. 依次类推。
这样定义比较省空间。例如你上面的结构，定义的变量类型是u_char，是一字节类型，即8bit。 fc_subtype占了4bit，fc_type占2bit,fc_protocol_version占2bit，共8bit，正好是一个字节。 其他八个成员,各占1bit，共8bit，正好也是一个字节。 因此你的结构的大小如果用sizeof（struct frame_control）计算，就是2bytes.</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;]如何将std vector反序</title>
      <link>https://dawnarc.com/2016/08/c-%E5%A6%82%E4%BD%95%E5%B0%86std-vector%E5%8F%8D%E5%BA%8F/</link>
      <pubDate>Wed, 17 Aug 2016 15:59:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/08/c-%E5%A6%82%E4%BD%95%E5%B0%86std-vector%E5%8F%8D%E5%BA%8F/</guid>
      <description>使用std::reverse函数：
#include &amp;lt;vector&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;iterator&amp;gt;#include &amp;lt;algorithm&amp;gt;int main(){std::vector&amp;lt;int&amp;gt; v({1,2,3});std::reverse(std::begin(v), std::end(v));std::cout &amp;lt;&amp;lt; v[0] &amp;lt;&amp;lt; v[1] &amp;lt;&amp;lt; v[2] &amp;lt;&amp;lt; &#39;\n&#39;;int a[] = {4, 5, 6, 7};std::reverse(std::begin(a), std::end(a));std::cout &amp;lt;&amp;lt; a[0] &amp;lt;&amp;lt; a[1] &amp;lt;&amp;lt; a[2] &amp;lt;&amp;lt; a[3] &amp;lt;&amp;lt; &#39;\n&#39;;} </description>
    </item>
    
    <item>
      <title>[C&#43;&#43;]vector等容器的元素引用问题</title>
      <link>https://dawnarc.com/2016/08/c-vector%E7%AD%89%E5%AE%B9%E5%99%A8%E7%9A%84%E5%85%83%E7%B4%A0%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 10 Aug 2016 13:57:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/08/c-vector%E7%AD%89%E5%AE%B9%E5%99%A8%E7%9A%84%E5%85%83%E7%B4%A0%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</guid>
      <description>示例代码：
struct TestStru{int val;TestStru(){val = -1;}};std::vector&amp;lt;TestStru&amp;gt; TestArr;TestStru e1;TestArr.push_back(e1);TestStru&amp;amp; e = TestArr[0];e.val = 999;TestStru e2;TestArr.push_back(e2); 变量e为数组TestArr内元素的引用，但是当执行TestArr.push_back(e2);时，e就失效了。原因是push_back的时候内部容器有扩容，另外vector的默认容量为0。</description>
    </item>
    
  </channel>
</rss>
