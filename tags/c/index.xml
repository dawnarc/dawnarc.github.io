<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on 玄冬Wong</title>
    <link>https://dawnarc.com/tags/c/</link>
    <description>Recent content in C on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jun 2020 16:04:02 +0800</lastBuildDate>
    
	<atom:link href="https://dawnarc.com/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[C]printf函数源码实现</title>
      <link>https://dawnarc.com/2017/04/cprintf%E5%87%BD%E6%95%B0%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 17 Apr 2017 15:48:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2017/04/cprintf%E5%87%BD%E6%95%B0%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/</guid>
      <description>printf函数源码实现
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdarg.h&amp;gt; //va_start(arg,format),初始化参数指针arg，将函数参数format右边第一个参数地址赋值给arg //format必须是一个参数的指针，所以，此种类型函数至少要有一个普通的参数, //从而提供给va_start ,这样va_start才能找到可变参数在栈上的位置。 //va_arg(arg,char),获得arg指向参数的值，同时使arg指向下一个参数,char用来指名当前参数型 //va_end 在有些实现中可能会把arg改成无效值，这里，是把arg指针指向了 NULL,避免出现野指针 void print(const char *format, ...) { va_list arg; va_start(arg, format); while (*format) { char ret = *format; if (ret == &#39;%&#39;) { switch (*++format) { case &#39;c&#39;: { char ch = va_arg(arg, char); putchar(ch); break; } case &#39;s&#39;: { char *pc = va_arg(arg, char *); while (*pc) { putchar(*pc); pc++; } break; } default: break; } } else { putchar(*format); } format++; } va_end(arg); } int main() { print(&amp;quot;%s %s %c%c%c%c%c!</description>
    </item>
    
  </channel>
</rss>