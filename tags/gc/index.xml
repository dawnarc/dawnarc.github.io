<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gc on 玄冬Wong</title>
    <link>https://dawnarc.com/tags/gc/</link>
    <description>Recent content in Gc on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Feb 2018 17:41:02 +0800</lastBuildDate>
    
	<atom:link href="https://dawnarc.com/tags/gc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[UE4]引擎源码分析之：Memory</title>
      <link>https://dawnarc.com/2018/02/ue4%E5%BC%95%E6%93%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bmemory/</link>
      <pubDate>Wed, 07 Feb 2018 17:41:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/02/ue4%E5%BC%95%E6%93%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bmemory/</guid>
      <description>内存管理的入口：
Engine\Source\Runtime\Core\Public\HAL\UnrealMemory.h  内存池中的内存开辟和销毁
Engine\Source\Runtime\Core\Private\HAL\MallocBinned.cpp  MallocBinned.cpp主要函数 内存池的创建：
static FPoolInfo* AllocatePoolMemory(FMallocBinned&amp;amp; Allocator, FPoolTable* Table, uint32 PoolSize, uint16 TableIndex) { const uint32 PageSize = Allocator.PageSize; // Must create a new pool. uint32 Blocks = PoolSize / Table-&amp;gt;BlockSize; uint32 Bytes = Blocks * Table-&amp;gt;BlockSize; UPTRINT OsBytes = Align(Bytes, PageSize); checkSlow(Blocks &amp;gt;= 1); checkSlow(Blocks * Table-&amp;gt;BlockSize &amp;lt;= Bytes &amp;amp;&amp;amp; PoolSize &amp;gt;= Bytes); // Allocate memory. FFreeMem* Free = nullptr; SIZE_T ActualPoolSize; //TODO: use this to reduce waste?</description>
    </item>
    
    <item>
      <title>[UE4]引擎源码分析之：GarbageCollection</title>
      <link>https://dawnarc.com/2018/02/ue4%E5%BC%95%E6%93%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bgarbagecollection/</link>
      <pubDate>Sun, 04 Feb 2018 15:41:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/02/ue4%E5%BC%95%E6%93%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bgarbagecollection/</guid>
      <description>Engine\Source\Runtime\CoreUObject\Private\UObject\GarbageCollection.cpp
垃圾回收的逻辑堆栈（MainThread）：
UE4Editor-CoreUObject.dll!CollectGarbageInternal(EObjectFlags KeepFlags, bool bPerformFullPurge) Line 1496 UE4Editor-CoreUObject.dll!TryCollectGarbage(EObjectFlags KeepFlags, bool bPerformFullPurge) Line 1560 UE4Editor-Engine.dll!UEngine::PerformGarbageCollectionAndCleanupActors() Line 1134 UE4Editor-Engine.dll!UEngine::ConditionalCollectGarbage() Line 1108 UE4Editor-Engine.dll!UWorld::Tick(ELevelTick TickType, float DeltaSeconds) Line 1612 UE4Editor-UnrealEd.dll!UEditorEngine::Tick(float DeltaSeconds, bool bIdleMode) Line 1481 UE4Editor-UnrealEd.dll!UUnrealEdEngine::Tick(float DeltaSeconds, bool bIdleMode) Line 401 UE4Editor.exe!FEngineLoop::Tick() Line 3320 [Inline Frame] UE4Editor.exe!EngineTick() Line 62  人才的本领叫做技术，天才的创意叫做艺术。</description>
    </item>
    
  </channel>
</rss>