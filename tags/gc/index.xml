<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GC on 玄冬Wong</title>
    <link>https://dawnarc.com/tags/gc/</link>
    <description>Recent content in GC on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Feb 2018 17:41:02 +0800</lastBuildDate>
    
	<atom:link href="https://dawnarc.com/tags/gc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[UE4]Engine Source Analysis - Memory</title>
      <link>https://dawnarc.com/2018/02/ue4engine-source-analysis-memory/</link>
      <pubDate>Wed, 07 Feb 2018 17:41:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/02/ue4engine-source-analysis-memory/</guid>
      <description>Port of Memory Management:
Engine\Source\Runtime\Core\Public\HAL\UnrealMemory.h New and Destroy in Memory Pool
Engine\Source\Runtime\Core\Private\HAL\MallocBinned.cpp Critical Functions in MallocBinned.cpp Initialization of Memory Pool:
static FPoolInfo* AllocatePoolMemory(FMallocBinned&amp;amp; Allocator, FPoolTable* Table, uint32 PoolSize, uint16 TableIndex){const uint32 PageSize = Allocator.PageSize;// Must create a new pool.uint32 Blocks = PoolSize / Table-&amp;gt;BlockSize;uint32 Bytes = Blocks * Table-&amp;gt;BlockSize;UPTRINT OsBytes = Align(Bytes, PageSize);checkSlow(Blocks &amp;gt;= 1);checkSlow(Blocks * Table-&amp;gt;BlockSize &amp;lt;= Bytes &amp;amp;&amp;amp; PoolSize &amp;gt;= Bytes);// Allocate memory.</description>
    </item>
    
    <item>
      <title>[UE4]Engine Source Analysis - GarbageCollection</title>
      <link>https://dawnarc.com/2018/02/ue4engine-source-analysis-garbagecollection/</link>
      <pubDate>Sun, 04 Feb 2018 15:41:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/02/ue4engine-source-analysis-garbagecollection/</guid>
      <description>Source Path:
Engine\Source\Runtime\CoreUObject\Private\UObject\GarbageCollection.cpp Callstack of GC in MainThread which was the thread of processing AActor::Tick()：
UObject::ConditionalFinishDestroy() Obj.cpp:1006IncrementalDestroyGarbage(bool,float) GarbageCollection.cpp:1494IncrementalPurgeGarbage(bool,float) GarbageCollection.cpp:1421CollectGarbageInternal(EObjectFlags,bool) GarbageCollection.cpp:1969TryCollectGarbage(EObjectFlags,bool) GarbageCollection.cpp:2088UEngine::PerformGarbageCollectionAndCleanupActors() UnrealEngine.cpp:1409UEngine::ConditionalCollectGarbage() UnrealEngine.cpp:1383UWorld::Tick(ELevelTick,float) LevelTick.cpp:1755UEditorEngine::Tick(float,bool) EditorEngine.cpp:1514UUnrealEdEngine::Tick(float,bool) UnrealEdEngine.cpp:411FEngineLoop::Tick() LaunchEngineLoop.cpp:4844GuardedMain(const wchar_t *) Launch.cpp:171WinMain(HINSTANCE__ *,HINSTANCE__ *,char *,int) LaunchWindows.cpp:257__scrt_common_main_seh() 0x00007ff64fa5146aBaseThreadInitThunk 0x00007ffd732e7c24RtlUserThreadStart 0x00007ffd748ecea1  人才的本领叫做技术，天才的创意叫做艺术。</description>
    </item>
    
  </channel>
</rss>