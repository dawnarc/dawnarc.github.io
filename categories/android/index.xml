<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on 玄冬Wong</title>
    <link>https://dawnarc.com/categories/android/</link>
    <description>Recent content in Android on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jan 2022 16:43:28 +0800</lastBuildDate><atom:link href="https://dawnarc.com/categories/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Android]Ordinary Development Notes</title>
      <link>https://dawnarc.com/2022/01/androidordinary-development-notes/</link>
      <pubDate>Sat, 08 Jan 2022 16:43:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2022/01/androidordinary-development-notes/</guid>
      <description>&lt;p&gt;keywords: Android, Ordinary Development Notes&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Android]How To Get Free Size of Internalexternal Memory</title>
      <link>https://dawnarc.com/2019/07/androidhow-to-get-free-size-of-internalexternal-memory/</link>
      <pubDate>Tue, 30 Jul 2019 14:19:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/07/androidhow-to-get-free-size-of-internalexternal-memory/</guid>
      <description>&lt;p&gt;Keywords: Android Memory Size&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Android NDK]Toolchains of LLVM and GCC</title>
      <link>https://dawnarc.com/2019/07/android-ndktoolchains-of-llvm-and-gcc/</link>
      <pubDate>Fri, 05 Jul 2019 18:03:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/07/android-ndktoolchains-of-llvm-and-gcc/</guid>
      <description>&lt;p&gt;Keywords: Android NDK Toolchains&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Android NDK]How to support Android 9.0 when building using NDK r12b</title>
      <link>https://dawnarc.com/2019/02/android-ndkhow-to-support-android-9.0-when-building-using-ndk-r12b/</link>
      <pubDate>Fri, 22 Feb 2019 17:34:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/02/android-ndkhow-to-support-android-9.0-when-building-using-ndk-r12b/</guid>
      <description>&lt;p&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Android NDK]protobuf-lite 3.5编译</title>
      <link>https://dawnarc.com/2018/04/android-ndkprotobuf-lite-3.5%E7%BC%96%E8%AF%91/</link>
      <pubDate>Thu, 19 Apr 2018 15:42:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/04/android-ndkprotobuf-lite-3.5%E7%BC%96%E8%AF%91/</guid>
      <description>protobuf源码NDK编译配置 假设工程结构如下：
protobuf-build|-jni|- Android.mk|- Application.mk|- google|-protobuf Android.mk LOCAL_PATH := $(call my-dir) include $(CLEAR_VARS) CC_LITE_SRC_FILES := \google/protobuf/arena.cc \google/protobuf/arenastring.cc \google/protobuf/extension_set.cc \google/protobuf/generated_message_table_driven_lite.cc \google/protobuf/generated_message_util.cc \google/protobuf/io/coded_stream.cc \google/protobuf/io/zero_copy_stream.cc \google/protobuf/io/zero_copy_stream_impl_lite.cc \google/protobuf/message_lite.cc \google/protobuf/repeated_field.cc \google/protobuf/stubs/atomicops_internals_x86_gcc.cc \google/protobuf/stubs/atomicops_internals_x86_msvc.cc \google/protobuf/stubs/bytestream.cc \google/protobuf/stubs/common.cc \google/protobuf/stubs/int128.cc \google/protobuf/stubs/io_win32.cc \google/protobuf/stubs/once.cc \google/protobuf/stubs/status.cc \google/protobuf/stubs/statusor.cc \google/protobuf/stubs/stringpiece.cc \google/protobuf/stubs/stringprintf.cc \google/protobuf/stubs/structurally_valid.cc \google/protobuf/stubs/strutil.cc \google/protobuf/stubs/time.cc \google/protobuf/wire_format_lite.</description>
    </item>
    
    <item>
      <title>[Android NDK]Link Library Which is Existed</title>
      <link>https://dawnarc.com/2018/04/android-ndklink-library-which-is-existed/</link>
      <pubDate>Wed, 18 Apr 2018 18:18:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/04/android-ndklink-library-which-is-existed/</guid>
      <description>Keywords: Android NDK,
Import headers of static libraries:
LOCAL_C_INCLUDES += ../include/ Import static libraries:
LOCAL_LDLIBS += ../lib/libMyBoostLib.a Android.mk：
LOCAL_PATH := $(call my-dir)include $(CLEAR_VARS)LOCAL_MODULE := helloJNILOCAL_SRC_FILES := mainActivity.cppLOCAL_C_INCLUDES := $(LOCAL_PATH)/inc/LOCAL_LDLIBS := -llog -L$(LOCAL_PATH)/inc/ -lMyLibraryinclude $(BUILD_SHARED_LIBRARY) Reference Include prebuilt static library
https://stackoverflow.com/questions/18983037/include-prebuilt-static-library
Using Prebuilt Libraries
https://developer.android.com/ndk/guides/prebuilts
 故兵无常势，水无常形。能因敌变化而取胜者，谓之神。故五行无常胜，四时无常位，日有短长，月有死生。---《孙子兵法·虚实篇》</description>
    </item>
    
    <item>
      <title>[Android NDK]arm-eabi-addr2line android应用崩溃的调试方法</title>
      <link>https://dawnarc.com/2018/03/android-ndkarm-eabi-addr2line-android%E5%BA%94%E7%94%A8%E5%B4%A9%E6%BA%83%E7%9A%84%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 29 Mar 2018 18:04:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/03/android-ndkarm-eabi-addr2line-android%E5%BA%94%E7%94%A8%E5%B4%A9%E6%BA%83%E7%9A%84%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</guid>
      <description>原文：https://blog.csdn.net/tommy_wxie/article/details/12841735
1.将ndk中的arm-linux-androideabi-addr2line可执行文件的路径加入配置文件~/.bashrc中，例如：
export PATH=$PATH:~/dlna/android-ndk-r6b/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin 2.使配置生效：
source ~/.bashrc 3.使用工具。例如：
arm-linux-androideabi-addr2line -C -f -e ~/workspace/DLNA/libs/armeabi/libctrlpt.so 0003deb4 其中，0003deb4为堆栈信息中pc的值。
android应用崩溃的调试方法 有两种方法可以分析 crash 的堆栈信息
1，google提供了一个python脚本，可以从 https://github.com/maxme/android-ndk-stacktrace-analyzer 下载这个python脚本，然后使用 adb logcat -d &amp;gt; logfile 导出 crash 的log,使用 arm-eabi-objdump 位于build/prebuilt/linux-x86/arm-eabi-4.2.1/bin下面把so或exe转换成汇编代码，如：arm-eabi-objdump -S mylib.so &amp;gt; mylib.asm,使用脚本
python parse_stack.py &amp;lt;asm-file&amp;gt; &amp;lt;logcat-file&amp;gt; 2，直接使用NDK下面的arm-linux-androideabi-addr2line
(D:\android-ndk-r8\toolchains\arm-linux- androideabi-4.4.3\prebuilt\windows\bin\arm-linux-androideabi-addr2line.exe)
例如：
arm-linux-androideabi-addr2line -C -f -e libxxx.so 0x#####(address) 出现 ??:0 , 没法展示源代码行数的问题 在Android.mk 文件中:
LOCAL_CFLAGS := -D__STDC_CONSTANT_MACROS -Wl,-Map=test.map -g  补充2个编译参数 -Wl,-Map=test.map -g .</description>
    </item>
    
    <item>
      <title>[Android NDK]protobuf-lite 2.6编译与protoc生成代码编译</title>
      <link>https://dawnarc.com/2018/02/android-ndkprotobuf-lite-2.6%E7%BC%96%E8%AF%91%E4%B8%8Eprotoc%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sun, 11 Feb 2018 12:27:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/02/android-ndkprotobuf-lite-2.6%E7%BC%96%E8%AF%91%E4%B8%8Eprotoc%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/</guid>
      <description>Protobuf源码与protoc生成代码编译成一个静态库 工程结构：
MyProj|-jni|- Android.mk|- Application.mk|- google|- protobuf|- io|- stubs|- proto_gen_src 其中，google为protobuf的源码；proto_gen_src为protoc生成的代码，即：*.pb.cc。
Android.mk
LOCAL_PATH := $(call my-dir) include $(CLEAR_VARS) CC_LITE_SRC_FILES := \google/protobuf/stubs/common.cc \google/protobuf/stubs/once.cc \google/protobuf/extension_set.cc \google/protobuf/generated_message_util.cc \google/protobuf/message_lite.cc \google/protobuf/repeated_field.cc \google/protobuf/wire_format_lite.cc \google/protobuf/io/coded_stream.cc \google/protobuf/io/zero_copy_stream.cc \google/protobuf/io/zero_copy_stream_impl_lite.cc # C++ full library # ======================================================= #include $(CLEAR_VARS) LOCAL_MODULE := MyProj.ndkLOCAL_MODULE_TAGS := optional LOCAL_CPP_EXTENSION := .cc #protobuf源码目录LOCAL_SRC_FILES += \$(CC_LITE_SRC_FILES)#protoc生成代码的目录MY_CPP_LIST := $(wildcard $(LOCAL_PATH)/proto_gen_src/*.</description>
    </item>
    
    <item>
      <title>[Android NDK]错误log：ExtMediaPlayer-JNI(22104) env-IsInstanceOf fails</title>
      <link>https://dawnarc.com/2016/10/android-ndk%E9%94%99%E8%AF%AFlogextmediaplayer-jni22104-env-isinstanceof-fails/</link>
      <pubDate>Mon, 17 Oct 2016 15:35:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/10/android-ndk%E9%94%99%E8%AF%AFlogextmediaplayer-jni22104-env-isinstanceof-fails/</guid>
      <description>如果你的android app出现以下两种错误log提示，并不影响你的app运行，如果你的app崩溃，可以忽略下面两种log。
10-17 16:59:29.263: E/ExtMediaPlayer-JNI(22104): env-&amp;gt;IsInstanceOf fails10-17 16:59:29.263: E/MediaPlayer-JNI(22104): JNIMediaPlayerFactory: bIsQCMediaPlayerPresent 010-17 16:59:29.263: E/ExtMediaPlayer-JNI(22104): env-&amp;gt;IsInstanceOf fails10-17 16:59:29.263: E/MediaPlayer-JNI(22104): JNIMediaPlayerFactory: bIsQCMediaPlayerPresent 010-18 00:25:40.894: E/MediaPlayer(28634): stop called in state 110-18 00:25:40.894: E/MediaPlayer(28634): error (-38, 0)10-18 00:25:40.903: E/MediaPlayer(28634): Error (-38,0) 这两个错误log的具体原因不清楚，第一个貌似和权限相关。</description>
    </item>
    
    <item>
      <title>[Android NDK]Android.mk missing separator.Stop</title>
      <link>https://dawnarc.com/2016/10/android-ndkandroid.mk-missing-separator.stop/</link>
      <pubDate>Sat, 15 Oct 2016 15:30:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/10/android-ndkandroid.mk-missing-separator.stop/</guid>
      <description>android NDK编译代码时，命令行提示错误：
jni/Android.mk:21: *** missing separator. Stop.
原因有以下几点： 1，$符号之前必须有一个空格，不能跟前面的字符连在一起。如果$是该行的第一个字符，前面可以不用空格。 例子（正常）：
LOCAL_PATH := $(call my-dir) include $(CLEAR_VARS)  错误写法：
LOCAL_PATH :=$(call my-dir) include$(CLEAR_VARS)  2，每行结尾处不能有空格。 例子（正常）：
COMPILER_SRC_FILES := \ 错误写法：
COMPILER_SRC_FILES := \  </description>
    </item>
    
    <item>
      <title>[Android NDK]STL linking issues (bug)</title>
      <link>https://dawnarc.com/2016/10/android-ndkstl-linking-issues-bug/</link>
      <pubDate>Sat, 15 Oct 2016 02:24:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/10/android-ndkstl-linking-issues-bug/</guid>
      <description>NDK 1.2之后的版本已修复此bug，1.2及1.2之前的版本存在这个问题。但1.2之后的版本不再支持GCC。
原文： http://boguscoder.blogspot.jp/2013/08/android-ndk-stl-linking-issues-bug.html
ld.exe: libmoduleA.a(moduleA.o): in function std::priv::_String_base&amp;lt;char, std::allocator&amp;gt;::_M_allocate_block(unsigned int):/sources/cxx-stl/stlport/stlport/stl/_alloc.h:158: error: undefined reference to &amp;lsquo;std::_node_alloc::_M_allocate(unsigned int&amp;amp;)&amp;rsquo; ld.exe: libmoduleA.a(moduleA.o): in function std::priv::_String_base&amp;lt;char, std::allocator&amp;gt;::_M_allocate_block(unsigned int):/sources/cxx-stl/stlport/stlport/stl/_string.c:600: error: undefined reference to &amp;lsquo;std:__stl_throw_length_error(char const*)&amp;rsquo; ld.exe: libmoduleA.a(moduleA.o): in function functionA():/sources/cxx-stl/stlport/stlport/stl/_alloc.h:161: error: undefined reference to &amp;lsquo;std::__node_alloc::_M_deallocate(void*, unsigned int)&amp;lsquo;collect2: ld returned 1 exit status
Android.mk中添加库libstlport_static.a：
LOCAL_LDLIBS := -lmoduleA \&amp;lt;NDK_PATH&amp;gt;/libstlport_static.a 如果是UE4工程编译Android，到android-ndk-r10e\sources\cxx-stl\stlport\libs\armeabi\下拷贝一个libstlport_static.a到你工程的库文件目录下即可。</description>
    </item>
    
    <item>
      <title>[Android NDK] Link static library to your JNI library</title>
      <link>https://dawnarc.com/2016/10/android-ndk-link-static-library-to-your-jni-library/</link>
      <pubDate>Sat, 15 Oct 2016 01:09:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/10/android-ndk-link-static-library-to-your-jni-library/</guid>
      <description>Origin:
http://blog.marcingil.com/android-ndk-link-static-library-to-your-jni-library/
When you&amp;rsquo;re developing an application that needs to use a custom, native precompiled library (the .a file) together with your gluing JNI interface maybe you&amp;rsquo;re wondering how to link it. It&amp;rsquo;s fairly simple and you can even make it target architecture aware (separate precompiled libraries for arm, arm-v7a, x86). In your module (I&amp;rsquo;m using Android Studio) you should have a jnidirectory, like this:
project /+ module+ src+ main+ jni # JNI source files here and other native sources here| Android.</description>
    </item>
    
    <item>
      <title>[Android NDK]fatal error &#39;backward_warning.h&#39; file not found</title>
      <link>https://dawnarc.com/2016/10/android-ndkfatal-error-backward_warning.h-file-not-found/</link>
      <pubDate>Sat, 15 Oct 2016 01:09:40 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/10/android-ndkfatal-error-backward_warning.h-file-not-found/</guid>
      <description>android中使用hash_map时报错： fatal error: &#39;backward_warning.h&#39; file not found
解决办法： Android.mk添加宏定义
LOCAL_CFLAGS := -D_GLIBCXX_PERMIT_BACKWARD_HASH  如果是UE4项目编译android版本，在工程的Build.cs中添加：
Definitions.Add(&amp;quot;_GLIBCXX_PERMIT_BACKWARD_HASH&amp;quot;); </description>
    </item>
    
  </channel>
</rss>
