<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on 玄冬Wong</title>
    <link>https://dawnarc.com/categories/algorithms/</link>
    <description>Recent content in Algorithms on 玄冬Wong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jun 2020 21:13:28 +0800</lastBuildDate><atom:link href="https://dawnarc.com/categories/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Algorithms]Item Bank Notes</title>
      <link>https://dawnarc.com/2020/06/algorithmsitem-bank-notes/</link>
      <pubDate>Fri, 19 Jun 2020 21:13:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2020/06/algorithmsitem-bank-notes/</guid>
      <description>&lt;p&gt;keywords: Algorithms, Item Bank Notes&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Algorithms]Adaptive Radix Tree Notes</title>
      <link>https://dawnarc.com/2020/05/algorithmsadaptive-radix-tree-notes/</link>
      <pubDate>Sat, 30 May 2020 07:10:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2020/05/algorithmsadaptive-radix-tree-notes/</guid>
      <description>&lt;p&gt;keywords: Algorithms, Adaptive Radix Tree&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Algorithms]Crowd Simulation Notes</title>
      <link>https://dawnarc.com/2020/05/algorithmscrowd-simulation-notes/</link>
      <pubDate>Sun, 17 May 2020 02:19:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2020/05/algorithmscrowd-simulation-notes/</guid>
      <description>&lt;p&gt;keywords: Algorithms, Crowd Simulation&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Algorithms]WaveFunctionCollapse Notes</title>
      <link>https://dawnarc.com/2019/11/algorithmswavefunctioncollapse-notes/</link>
      <pubDate>Tue, 12 Nov 2019 14:47:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/11/algorithmswavefunctioncollapse-notes/</guid>
      <description>&lt;p&gt;keywords: Algorithms, WaveFunctionCollapse&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Algorithms]Binary Tree, Quadtree and Octree</title>
      <link>https://dawnarc.com/2019/10/algorithmsbinary-tree-quadtree-and-octree/</link>
      <pubDate>Wed, 16 Oct 2019 14:39:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/10/algorithmsbinary-tree-quadtree-and-octree/</guid>
      <description>&lt;p&gt;keywords: Algorithms, Binary Tree, Quadtree and Octree&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Algorithms]Time Complexity of Vector, Set and Map</title>
      <link>https://dawnarc.com/2019/09/algorithmstime-complexity-of-vector-set-and-map/</link>
      <pubDate>Mon, 09 Sep 2019 13:53:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2019/09/algorithmstime-complexity-of-vector-set-and-map/</guid>
      <description>&lt;p&gt;keywords: C++, Time Complexity, Vector, Set and Map&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Algorithms]Calculator Stack</title>
      <link>https://dawnarc.com/2018/10/algorithmscalculator-stack/</link>
      <pubDate>Fri, 12 Oct 2018 14:36:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/10/algorithmscalculator-stack/</guid>
      <description>keywords：计算器代码、Calculator
#include &amp;quot;stdio.h&amp;quot;#include &amp;quot;string.h&amp;quot;#define MAX 1001double stack[MAX];int tail;int main(){int a;while(scanf(&amp;quot;%d &amp;quot;,&amp;amp;a)&amp;amp;&amp;amp;a!=0){tail=0;stack[++tail]=1.0*a;//tail始终指向末尾数字位置//1.入栈所有数据（如果遇到*/号，只更新栈尾）char ch1,ch2;while(scanf(&amp;quot;%c %d%c&amp;quot;,&amp;amp;ch1,&amp;amp;a,&amp;amp;ch2)!=EOF){if(ch1==&#39;+&#39;){stack[++tail]=1.0*a;//push}else if(ch1==&#39;-&#39;){stack[++tail]=-1.0*a;//push neg}else if(ch1==&#39;*&#39;){stack[tail]=stack[tail]*a;//update tail}else if(ch1==&#39;/&#39;){stack[tail]=stack[tail]/(double)a;//updata tail}if(ch2!=&#39; &#39;)break; }//2.把栈里头的东西全部加起来，求和double result=0;for(int i=1;i&amp;lt;=tail;i++)result+=stack[i];printf(&amp;quot;%.2lf\n&amp;quot;,result);}return 1;} 原文：https://blog.csdn.net/JIEJINQUANIL/article/details/51405381</description>
    </item>
    
    <item>
      <title>[Algorithms]StarCraft 2&#39;s AI Algorithm</title>
      <link>https://dawnarc.com/2018/07/algorithmsstarcraft-2s-ai-algorithm/</link>
      <pubDate>Thu, 12 Jul 2018 13:28:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2018/07/algorithmsstarcraft-2s-ai-algorithm/</guid>
      <description>keywords：Pathfinding、Rush AI、Flocking AI、Swarm AI、Fish AI、
Blogs The StarCraft BroodWar Resource for custom AIs
http://www.starcraftai.com/wiki/Main_Page
How does StarCraft II&amp;rsquo;s pathfinding algorithm work?
https://www.quora.com/How-does-StarCraft-IIs-pathfinding-algorithm-work
pathing 6 - flocking
http://satirist.org/ai/starcraft/blog/archives/68-pathing-6-flocking.html
STARCRAFT 1 PATHFINDING: A TECHNICAL ANALYSIS
http://striketactics.net/devblog/starcraft-1-pathfinding-technical-analysis
The StarCraft path-finding hack
https://www.codeofhonor.com/blog/the-starcraft-path-finding-hack
A* navigational mesh path finding
https://gamedev.stackexchange.com/questions/20392/a-navigational-mesh-path-finding
Documents Artificial Intelligence In Racing Games
https://www.cs.bham.ac.uk/~ddp/AIP/RacingGames.pdf
Papers A Q-Learning Algorithm for Adversarial Real-Time Strategy Games
https://www.aaai.org/ocs/index.php/AIIDE/AIIDE12/paper/download/5515/5734
StarCraft Unit Motion: Analysis and Search Enhancements
https://www.aaai.org/ocs/index.php/AIIDE/AIIDE15/paper/download/11573/11384</description>
    </item>
    
    <item>
      <title>[Algorithms]算法题：计算整数数组中，任意两个元素组合的差值，等于指定值的组合个数</title>
      <link>https://dawnarc.com/2017/09/algorithms%E7%AE%97%E6%B3%95%E9%A2%98%E8%AE%A1%E7%AE%97%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E4%BB%BB%E6%84%8F%E4%B8%A4%E4%B8%AA%E5%85%83%E7%B4%A0%E7%BB%84%E5%90%88%E7%9A%84%E5%B7%AE%E5%80%BC%E7%AD%89%E4%BA%8E%E6%8C%87%E5%AE%9A%E5%80%BC%E7%9A%84%E7%BB%84%E5%90%88%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Tue, 12 Sep 2017 12:19:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2017/09/algorithms%E7%AE%97%E6%B3%95%E9%A2%98%E8%AE%A1%E7%AE%97%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E4%BB%BB%E6%84%8F%E4%B8%A4%E4%B8%AA%E5%85%83%E7%B4%A0%E7%BB%84%E5%90%88%E7%9A%84%E5%B7%AE%E5%80%BC%E7%AD%89%E4%BA%8E%E6%8C%87%E5%AE%9A%E5%80%BC%E7%9A%84%E7%BB%84%E5%90%88%E4%B8%AA%E6%95%B0/</guid>
      <description>题目：
给定一个数组a，再给定一个值k，数组a的任意两个元素组合，他们的差值要求等于k，求出这种组合的对数。比如数组{1, 5, 3, 4, 2}，k=2，那么组合对数等于3，因为符合要求的组合为{1,3}、{4,2}、{5,3}。
代码：
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;int main(int argc, char* argv[]){std::vector&amp;lt;int&amp;gt; a;a.push_back(1);a.push_back(5);a.push_back(3);a.push_back(12);a.push_back(4);a.push_back(6);a.push_back(9);a.push_back(2);int k = 3;int count = 0;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; paired_eles(a.size(), std::vector&amp;lt;int&amp;gt;());for (size_t i = 0; i &amp;lt; a.size(); i++){for (size_t j = i + 1; j &amp;lt; a.size(); j++){if (abs(a[i] - a[j]) == k){paired_eles[i].push_back(j);count++;std::cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &amp;quot;,&amp;quot; &amp;lt;&amp;lt; a[j] &amp;lt;&amp;lt; std::endl;}}}std::cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; std::endl;system(&amp;quot;pause&amp;quot;);} 输出结果：</description>
    </item>
    
    <item>
      <title>[Algorithms]算法题：多个字母任意组合多个新字符串</title>
      <link>https://dawnarc.com/2017/09/algorithms%E7%AE%97%E6%B3%95%E9%A2%98%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AF%8D%E4%BB%BB%E6%84%8F%E7%BB%84%E5%90%88%E5%A4%9A%E4%B8%AA%E6%96%B0%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sun, 03 Sep 2017 20:22:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2017/09/algorithms%E7%AE%97%E6%B3%95%E9%A2%98%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AF%8D%E4%BB%BB%E6%84%8F%E7%BB%84%E5%90%88%E5%A4%9A%E4%B8%AA%E6%96%B0%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>题目：
比如一串字符，string s = &amp;ldquo;abcd&amp;rdquo;，假设里面的每个字符都不重复，求出这些字符任意组合后，形成的所有的新字符串。忽略掉顺序，比如ac和ca是同一种。 例子：
abc的3个字符可以组合的情况为： a b c ab bc ac abc
代码：
#include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;vector&amp;gt;int main(int argc, char* argv[]){std::string s(&amp;quot;abcd&amp;quot;);std::vector&amp;lt;std::string&amp;gt; vec;for (size_t i = 0; i &amp;lt; s.length(); i++){std::string s1(1, s.at(i));vec.push_back(s1);for (size_t j = i + 1; j &amp;lt; s.length(); j++){for (size_t k = 0; k &amp;lt; s.length() - j; k++){std::string s2 = s.</description>
    </item>
    
    <item>
      <title>[Algorithms]算法题：字符串转换为整数并排序</title>
      <link>https://dawnarc.com/2017/09/algorithms%E7%AE%97%E6%B3%95%E9%A2%98%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B4%E6%95%B0%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 03 Sep 2017 20:22:28 +0800</pubDate>
      
      <guid>https://dawnarc.com/2017/09/algorithms%E7%AE%97%E6%B3%95%E9%A2%98%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B4%E6%95%B0%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>题目：
给定一组字符串，字符串中的字符都是数字，比如：&amp;ldquo;343&amp;rdquo;、&amp;ldquo;4521&amp;rdquo;、&amp;ldquo;3&amp;rdquo;，将这些字符串转换为整数后并升序排序。
代码：
#include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;math.h&amp;gt;int main(int argc, char* argv[]){std::vector&amp;lt;std::string&amp;gt; StrArr;StrArr.push_back(std::string(&amp;quot;563435&amp;quot;));StrArr.push_back(std::string(&amp;quot;234234&amp;quot;));StrArr.push_back(std::string(&amp;quot;454&amp;quot;));StrArr.push_back(std::string(&amp;quot;5765&amp;quot;));StrArr.push_back(std::string(&amp;quot;12&amp;quot;));StrArr.push_back(std::string(&amp;quot;6&amp;quot;));//字符串转数字std::vector&amp;lt;int&amp;gt; IntArr;for (std::string&amp;amp; str : StrArr){size_t len = str.length();int val = 0;for (size_t i = 0; i &amp;lt; len; i++){char c = str.at(i);//判断是不是阿拉伯数字if (c &amp;lt; 48 || c &amp;gt; 57){continue;}int iv = c - 48;val += pow(10, (len - 1 - i)) * iv;}IntArr.</description>
    </item>
    
    <item>
      <title>随机数、随机数种子</title>
      <link>https://dawnarc.com/2016/10/%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%A7%8D%E5%AD%90/</link>
      <pubDate>Mon, 10 Oct 2016 19:11:02 +0800</pubDate>
      
      <guid>https://dawnarc.com/2016/10/%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%A7%8D%E5%AD%90/</guid>
      <description>原文：http://www.cnblogs.com/ovliverlin/archive/2008/03/17/1109106.html
在计算机中并没有一个真正的随机数发生器，但是可以做到使产生的数字重复率很低，这样看起来好象是真正的随机数，实现这一功能的程序叫伪随机数发生器。
有关如何产生随机数的理论有许多，如果要详细地讨论，需要厚厚的一本书的篇幅。不管用什么方法实现随机数发生器，都必须给它提供一个名为“种子”的初始值。而且这个值最好是随机的，或者至少这个值是伪随机的。“种子”的值通常是用快速计数寄存器或移位寄存器来生成的。
下面讲一讲在C语言里所提供的随机数发生器的用法。现在的C编译器都提供了一个基于ANSI标准的伪随机数发生器函数，用来生成随机数。它们就是rand()和srand()函数。这二个函数的工作过程如下：
  首先给srand()提供一个种子，它是一个unsigned int类型，其取值范围从0~65535；
  然后调用rand()，它会根据提供给srand()的种子值返回一个随机数(在0到32767之间)
  根据需要多次调用rand()，从而不间断地得到新的随机数；
  无论什么时候，都可以给srand()提供一个新的种子，从而进一步“随机化”rand()的输出结果。
  这个过程看起来很简单，问题是如果你每次调用srand()时都提供相同的种子值，那么，你将会得到相同的随机数序列，这时看到的现象是没有随机数，而每一次的数都是一样的了。例如，在以17为种子值调用srand()之后，在首次调用rand()时，得到随机数94。在第二次和第三次调用rand()时将分别得到26602和30017，这些数看上去是很随机的(尽管这只是一个很小的数据点集合)，但是，在你再次以17为种子值调用srand()后，在对于rand()的前三次调用中，所得的返回值仍然是在对94，26602，30017，并且此后得到的返回值仍然是在对rand()的第一批调用中所得到的其余的返回值。因此只有再次给srand()提供一个随机的种子值，才能再次得到一个随机数。</description>
    </item>
    
  </channel>
</rss>
